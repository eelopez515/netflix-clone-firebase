{"version":3,"sources":["Components/Nav.js","API/axios.js","API/Requests.js","Components/Banner.js","Components/Row.js","Components/HomeScreen.js","API/firebase.js","Components/SignInScreen.js","Components/LoginScreen.js","features/userSlice.js","Components/PlansScreen.js","Components/ProfileScreen.js","Components/App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","REACT_APP_API_KEY","process","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","console","log","map","poster_path","id","HomeScreen","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","SignInScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","products","setProduct","useSelector","subscription","setSubscription","collection","doc","uid","querySnapshot","forEach","role","current_period_end","seconds","current_period_start","where","productDoc","docs","price","prices","priceId","priceData","loadCheckout","add","success_url","location","origin","cancel_url","onSnapshot","snap","sessionId","loadStripe","redirectToCheckout","Date","toLocaleDateString","Object","entries","productId","productData","isCurrentPlan","includes","description","ProfileScreen","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","path","exact","configureStore","reducer","userReducer","Boolean","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c487975.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport '../Style/Nav.css'\n\nfunction Nav() {\n    const [show, handleShow] = useState(false)\n    const history = useHistory()\n    const transitionNavBar = () => {\n        if(window.scrollY > 100) {\n            handleShow(true)\n        } else {\n            handleShow(false)\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll', transitionNavBar)\n        return () => window.removeEventListener('scroll', transitionNavBar)\n    }, [])\n    return (\n        <div className={`nav ${show && 'nav__black'}`}>\n            <div className=\"nav__contents\">\n                <img\n                onClick={() => history.push('/')}\n                className='nav__logo'\n                src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                alt=\"Netflix Clone Log\"/>\n                <img\n                onClick={() => history.push('/profile')}\n                className='nav__avatar'\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                alt=\"User Avatar\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3'\n})\n\nexport default instance","const { REACT_APP_API_KEY } = process.env\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${REACT_APP_API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${REACT_APP_API_KEY}&with_network=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${REACT_APP_API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${REACT_APP_API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${REACT_APP_API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${REACT_APP_API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${REACT_APP_API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${REACT_APP_API_KEY}&with_genres=99`,\n}\n\nexport default requests","import React, { useState, useEffect } from 'react'\nimport '../Style/Banner.css'\nimport axios from '../API/axios'\nimport requests from '../API/Requests'\n\nfunction Banner() {\n    const [movie, setMovie] = useState([])\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals)\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            )\n            return request\n        }\n\n        fetchData()\n    }, [])\n\n    function truncate(string, n) {\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string\n    }\n    return (\n        <header className='banner' style={{\n            backgroundSize: 'cover',\n            backgroundImage: `url('https://image.tmdb.org/t/p/original/${movie?.backdrop_path}')`,\n            backgroundPosition: 'center center'\n        }}>\n            <div className=\"banner__contents\">\n                <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner__buttons\">\n                    <button className='banner__button'>Play</button>\n                    <button className='banner__button'>My List</button>\n                </div>\n                <h1 className=\"banner__description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>\n            </div>\n            <div className=\"banner--fadeBottom\" />\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport axios from '../API/axios'\nimport '../Style/Row.css'\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) { \n    const [movies, setMovies] = useState([])\n    const base_url = 'https://image.tmdb.org/t/p/original/'\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl)\n            setMovies(request.data.results)\n            return request\n        }\n\n        fetchData()\n    }, [fetchUrl])\n    console.log(movies)\n\n    return (\n        <div className='row'>\n            <h2>{title}</h2>\n\n            <div className=\"row__posters\">\n            {movies.map(\n                (movie) => \n                ((isLargeRow && movie.poster_path) || \n                (!isLargeRow && movie.backdrop_path)) && (\n                    <img\n                    className={`row__poster ${isLargeRow && 'row__posterLarge'}`}\n                    key={movie.id}\n                    src={`${base_url}${\n                        isLargeRow ? movie.poster_path : movie.backdrop_path\n                    }`}\n                    alt={movie.name}\n                    />\n                )\n            )}\n            </div>\n        </div>\n    )\n}\n\nexport default Row\n","import React from 'react'\nimport Nav from './Nav'\nimport Banner from './Banner'\nimport Row from './Row'\nimport '../Style/HomeScreen.css'\nimport requests from '../API/Requests'\n\nfunction HomeScreen() {\n    return (\n        <div className='homeScreen'>\n            {/* Nav */}\n            <Nav />\n            {/* Banner */}\n            <Banner />\n            {/* Rows */}\n            <Row\n            title='NETFLIX ORIGINALS'\n            fetchUrl={requests.fetchNetflixOriginals}\n            isLargeRow\n            />\n            <Row\n            title='Trending Now'\n            fetchUrl={requests.fetchTrending}\n            />\n            <Row\n            title='Top Rated'\n            fetchUrl={requests.fetchTopRated}\n            />\n            <Row\n            title='Action Movies'\n            fetchUrl={requests.fetchActionMovies}\n            />\n            <Row\n            title='Comedy Movies'\n            fetchUrl={requests.fetchComedyMovies}\n            />\n            <Row\n            title='Horror Movies'\n            fetchUrl={requests.fetchHorrorMovies}\n            />\n            <Row\n            title='Romance Movies'\n            fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row\n            title='Documentaries'\n            fetchUrl={requests.fetchDocumentaries}\n            />\n        </div>\n    )\n}\n\nexport default HomeScreen\n","import firebase from 'firebase'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAy4U1b1_9OurGTyeYz7YfS4c87Ppv9XJw\",\n    authDomain: \"netflix-clone-firebase-9613d.firebaseapp.com\",\n    projectId: \"netflix-clone-firebase-9613d\",\n    storageBucket: \"netflix-clone-firebase-9613d.appspot.com\",\n    messagingSenderId: \"618185875236\",\n    appId: \"1:618185875236:web:c0340eab08f96696e05db1\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig)\n  const db = firebaseApp.firestore()\n  const auth = firebase.auth()\n\n  export { auth }\n  export default db","import React, { useRef } from 'react'\nimport { auth } from '../API/firebase'\nimport '../Style/SignInScreen.css'\n\nfunction SignInScreen() {\n\n    const emailRef = useRef(null)\n    const passwordRef = useRef(null)\n\n    const register = (e) => {\n        e.preventDefault()\n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser)\n        })\n        .catch((error) => {\n            alert(error.message)\n        })\n    }\n\n    const signIn = (e) => {\n        e.preventDefault()\n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        )\n        .then((authUser) => {\n            console.log(authUser)\n        })\n        .catch((error) => {\n            alert(error.message)\n        })\n    }\n\n    return (\n        <div className='signInScreen'>\n            <form>\n                <h1>Sign In</h1>\n                <input\n                ref={emailRef}\n                placeholder='Email'\n                type=\"email\"\n                />\n                <input\n                ref={passwordRef} \n                placeholder='Password'\n                type=\"password\"\n                />\n                <button type='submit' onClick={signIn}>Sign In</button>\n                <h4>\n                    <span className='signUp__gray'>New to Netflix? </span>\n                    <span className='signUp__link' onClick={register}>Sign Up</span>\n                </h4>\n            </form>\n        </div>\n    )\n}\n\nexport default SignInScreen\n","import React, { useState } from 'react'\nimport SignInScreen from './SignInScreen'\nimport '../Style/LoginScreen.css'\n\nfunction LoginScreen() {\n    const [signIn, setSignIn] = useState(false)\n\n    return (\n        <div className='loginScreen'>\n            <div className=\"loginScreen__background\">\n                <img\n                className='loginScreen__logo'\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                alt=\"Login Screen Logo\"\n                />\n                <button\n                onClick={() => setSignIn(true)}\n                className='loginScreen__button'\n                >\n                    Sign In\n                </button>\n                <div className=\"loginScreen__gradient\" />\n            </div>\n            <div className=\"loginScreen__body\">\n                {signIn ? (\n                    <SignInScreen />\n                ): (\n                    <>\n                    <h1>Unlimited films, TV shows, and more.</h1>\n                    <h2>Watch anywhere. Cancel at anytime</h2>\n                    <h3>Ready to watch? Enter your email to create or restart your memebership.</h3>\n                    <div className=\"loginScreen__input\">\n                        <form>\n                            <input\n                            placeholder='Email' \n                            type=\"email\"/>\n                            <button\n                            onClick={() => setSignIn(true)}\n                            className='loginScreen__getStarted'>\n                                Get Started\n                            </button>\n                        </form>\n                    </div> \n                    </> \n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload\r\n    },\r\n    logout: (state) => {\r\n      state.user = null\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React, { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport { loadStripe } from '@stripe/stripe-js'\nimport db from '../API/firebase'\nimport '../Style/PlansScreen.css'\n\nfunction PlansScreen() {\n    const [products, setProduct] = useState([])\n    const user = useSelector(selectUser)\n    const [subscription, setSubscription] = useState(null)\n\n    useEffect(() => {\n        db.collection('customers')\n        .doc(user.uid)\n        .collection('subscriptions')\n        .get()\n        .then(querySnapshot => {\n            querySnapshot.forEach(async subscription => {\n                setSubscription({\n                    role: subscription.data().role,\n                    current_period_end: subscription.data().current_period_end.seconds,\n                    current_period_start: subscription.data().current_period_start.seconds,\n                })\n            })\n        })\n    }, [user.uid])\n\n    useEffect(() => {\n        db.collection('products')\n        .where('active', '==', true)\n        .get()\n        .then((querySnapshot) => {\n            const products = {}\n            querySnapshot.forEach(async productDoc => {\n                products[productDoc.id] = productDoc.data()\n                const priceSnap = await productDoc.ref.collection('prices').get()\n                priceSnap.docs.forEach(price => {\n                    products[productDoc.id].prices = {\n                        priceId: price.id,\n                        priceData: price.data()\n                    }\n                })\n            })\n            setProduct(products)\n        })\n    }, [])\n\n    const loadCheckout = async (priceId) => {\n        const docRef = await db.collection('customers')\n        .doc(user.uid)\n        .collection('checkout_sessions')\n        .add({\n            price: priceId,\n            success_url: window.location.origin,\n            cancel_url: window.location.origin\n        })\n\n        docRef.onSnapshot(async (snap) => {\n            const { error, sessionId } = snap.data()\n\n            if(error) {\n                alert(`An error occured: ${error.message}`)\n            }\n            if(sessionId) {\n                const stripe = await loadStripe('pk_test_51HaNmuJq1n75LKGAq4XCTCzgaORzQalo3pW7Lb2N6IdwOjMInS1BhWG0FBtQyoc0tbVOFiChNZeJgqNbMmt8Oy0j00yYsiBFvt')\n                stripe.redirectToCheckout({ sessionId })\n            }\n        })\n    }\n    return (\n        <div className='plansScreen'>\n            <br/>\n            {subscription && <p>Renewal date: {new Date(subscription?.current_period_end * 1000).toLocaleDateString()}</p>}\n            {Object.entries(products).map(([productId, productData]) => {\n                const isCurrentPlan = productData.name?.includes(subscription?.role)\n                console.log(isCurrentPlan)\n                return(\n                    <div key={productId} className={`${isCurrentPlan && 'plansScreen__plan-disabled'} plansScreen__plan`}>\n                        <div className=\"plansScreen__info\">\n                            <h5>{productData.name}</h5>\n                            <h6>{productData.description}</h6>\n                        </div>\n                        <button\n                        onClick={() => !isCurrentPlan && loadCheckout(productData.prices.priceId)}>\n                            {isCurrentPlan ? 'Current Plan' : 'Subscribe'}\n                        </button>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default PlansScreen\n","import React from 'react'\nimport Nav from './Nav'\nimport PlansScreen from './PlansScreen'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport { auth } from '../API/firebase'\nimport '../Style/ProfileScreen.css'\n\nfunction ProfileScreen() {\n    const user = useSelector(selectUser)\n    return (\n        <div className='profileScreen'>\n            <Nav />\n            <div className=\"profileScreen__body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen__info\">\n                    <img\n                    src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                    alt=\"Profile Avatar\"/>\n                    <div className=\"profileScreen__details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen__plans\">\n                            <h3>Plans</h3>\n                            <PlansScreen />\n                            <button\n                            onClick={() => auth.signOut()}\n                            className='profileScreen__signOut'>\n                                Sign Out\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HomeScreen from './HomeScreen'\r\nimport LoginScreen from './LoginScreen'\r\nimport ProfileScreen from './ProfileScreen'\r\nimport { auth } from '../API/firebase'\r\nimport '../Style/App.css';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { login, logout, selectUser } from '../features/userSlice'\r\n\r\nfunction App() {\r\n  const user = useSelector(selectUser); \r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n   const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n      if (userAuth) {\r\n        dispatch(login({\r\n          uid: userAuth.uid,\r\n          email: userAuth.email\r\n        }))\r\n      } else {\r\n        dispatch(logout())\r\n      }\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n        <LoginScreen />\r\n        ) : (\r\n        <Switch> \r\n          <Route path='/profile'>\r\n            <ProfileScreen />\r\n          </Route>\r\n          <Route exact path='/'>\r\n            <HomeScreen />\r\n          </Route>\r\n        </Switch>\r\n        )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}